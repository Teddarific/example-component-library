// Generated by dts-bundle-generator v8.0.1

import React from 'react'
import { RelativeRoutingType, To } from 'react-router'

export interface DomLinkProps
  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> {
  reloadDocument?: boolean
  replace?: boolean
  state?: any
  preventScrollReset?: boolean
  relative?: RelativeRoutingType
  to: To
}
/**
 * Defines the prefetching behavior of the link:
 *
 * - "intent": Fetched when the user focuses or hovers the link
 * - "render": Fetched when the link is rendered
 * - "none": Never fetched
 */
export type PrefetchBehavior = 'intent' | 'render' | 'none'
export interface RemixLinkProps extends DomLinkProps {
  prefetch?: PrefetchBehavior
}
declare let Link: React.ForwardRefExoticComponent<
  RemixLinkProps & React.RefAttributes<HTMLAnchorElement>
>
export type ButtonProps = React.DetailedHTMLProps<
  React.ButtonHTMLAttributes<HTMLButtonElement>,
  HTMLButtonElement
>
export type LinkProps = Parameters<typeof Link>[0]
export declare function PrimaryButton({
  children,
  className,
  ...props
}: ButtonProps): JSX.Element
export declare function PrimaryLink({
  children,
  className,
  to,
  ...props
}: LinkProps): JSX.Element
export declare function SecondaryButton({
  children,
  className,
  ...props
}: ButtonProps): JSX.Element
export declare function SecondaryButtonOutline({
  children,
  className,
  ...props
}: ButtonProps): JSX.Element
export declare function SecondaryLink({
  children,
  className,
  ...props
}: LinkProps): JSX.Element
export declare function SecondaryLinkOutline({
  children,
  className,
  ...props
}: LinkProps): JSX.Element
export type ContainerProps = {
  className?: string
  children: React.ReactNode
}
export declare function Container({
  className,
  children,
}: ContainerProps): JSX.Element
export type CopyTextProps = {
  children?: React.ReactNode
  value: string
  className?: string
  onCopied?: () => void
}
export declare function CopyText({
  children,
  value,
  className,
  onCopied,
}: CopyTextProps): JSX.Element
export type CopyTextButtonProps = {
  value: string
  text?: string
  className?: string
  variant?: 'slate' | 'blue' | 'darkTransparent' | 'lightTransparent' | 'text'
}
export declare function CopyTextButton({
  value,
  className,
  text,
  variant,
}: CopyTextButtonProps): JSX.Element
export type CopyTextPanelProps = {
  value: string
  text?: string
  className?: string
  variant?: 'primary' | 'slate' | 'text' | 'light'
}
export declare function CopyTextPanel({
  value,
  text,
  className,
  variant,
}: CopyTextPanelProps): JSX.Element
export declare function Footer(): JSX.Element
export declare function GithubStarsButtonStatic({
  count,
}: {
  count: number
}): JSX.Element
export declare function GithubStarsButtonLargeStatic({
  count,
}: {
  count: number
}): JSX.Element
export declare function Header(): JSX.Element
export declare function MarkdownMain({
  children,
}: {
  children: React.ReactNode
}): JSX.Element
export type NavLinkProps = Parameters<typeof Link>[0]
export declare function NavLink({
  to,
  children,
  target,
  className,
  onClick,
  ...props
}: NavLinkProps): JSX.Element
export declare function MobileNavLink({
  to,
  children,
  className,
  onClick,
  ...props
}: NavLinkProps): JSX.Element
export declare function MobileNavIcon({ open }: { open: boolean }): JSX.Element
export type PanelProps = {
  children: React.ReactNode
  className?: string
  variant: panelVariant
  hoverClass?: string
}
export type panelVariant = 'dark' | 'dark-shiny'
export declare function Panel({
  children,
  className,
  variant,
}: PanelProps): JSX.Element
export declare function OffsetTriangleTop(): JSX.Element
export declare function OffsetTriangleBottom(): JSX.Element
export declare function OffsetTriangleLeftTop(): JSX.Element
export declare function OffsetCurveTop(): JSX.Element
export declare function OffsetCurveBottom(): JSX.Element
export declare function WaveTop(): JSX.Element
export declare function WaveTopWithPadding(): JSX.Element
export declare function WaveBottom(): JSX.Element
export declare function TriggerdotdevLogo(
  props: React.SVGProps<SVGSVGElement>
): JSX.Element
export type Theme = {
  theme?: 'light' | 'dark'
  size?: Size
}
export type Size = 'large' | 'regular' | 'small' | 'extra-small'
export type ParagraphProps = React.DetailedHTMLProps<
  React.HTMLAttributes<HTMLParagraphElement>,
  HTMLParagraphElement
> &
  Theme
export declare function Paragraph({
  children,
  className,
  theme,
  size,
  ...props
}: ParagraphProps): JSX.Element
export declare function Handwriting({
  children,
  className,
  theme,
  ...props
}: ParagraphProps): JSX.Element
export type Header1Props = React.DetailedHTMLProps<
  React.HTMLAttributes<HTMLHeadingElement>,
  HTMLHeadingElement
> &
  Theme
export declare function Header1({
  children,
  className,
  theme,
  ...props
}: Header1Props): JSX.Element
export type Header2Props = React.DetailedHTMLProps<
  React.HTMLAttributes<HTMLHeadingElement>,
  HTMLHeadingElement
> &
  Theme
export declare function Header2({
  children,
  className,
  theme,
  ...props
}: Header2Props): JSX.Element
export type Header3Props = React.DetailedHTMLProps<
  React.HTMLAttributes<HTMLHeadingElement>,
  HTMLHeadingElement
> &
  Theme
export declare function Header3({
  children,
  className,
  theme,
  ...props
}: Header3Props): JSX.Element
export type Header4Props = React.DetailedHTMLProps<
  React.HTMLAttributes<HTMLHeadingElement>,
  HTMLHeadingElement
> &
  Theme
export declare function Header4({
  children,
  className,
  theme,
  ...props
}: Header4Props): JSX.Element
export type SpanProps = React.DetailedHTMLProps<
  React.HTMLAttributes<HTMLSpanElement>,
  HTMLSpanElement
>
export declare function ToxicText({
  children,
  className,
  ...props
}: SpanProps): JSX.Element
export declare function PurpoText({
  children,
  className,
  ...props
}: SpanProps): JSX.Element

export {}
